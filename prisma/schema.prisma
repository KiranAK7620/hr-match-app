// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Domain Models (per PRD) ===

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role
  password       String?
  createdAt      DateTime  @default(now())

  // Relations
  Candidate      Candidate?
  HR             HR?
  accounts       Account[]
  sessions       Session[]
  recommendations Recommendation[]
}

model Candidate {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  skills      String[]
  experience  Int
  preferences Json
  resumeUrl   String?
  createdAt   DateTime @default(now())
}

model HR {
  id       String @id @default(cuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
  company  String
  jobs     Job[]
}

model Job {
  id             String   @id @default(cuid())
  hrId           String
  hr             HR       @relation(fields: [hrId], references: [id])
  title          String
  description    String
  requiredSkills String[]
  location       String?
  experience     Int?
  salaryRange    String?
  createdAt      DateTime @default(now())
}

model Recommendation {
  id          String   @id @default(cuid())
  requestType String   // "HR_TO_CANDIDATES" | "CANDIDATE_TO_JOBS"
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  query       String
  aiResponse  Json
  createdAt   DateTime @default(now())
}

enum Role {
  HR
  CANDIDATE
}

// === NextAuth Adapter Models ===

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refresh_token")
  access_token       String? @map("access_token")
  expires_at         Int?    @map("expires_at")
  token_type         String? @map("token_type")
  scope              String?
  id_token           String? @map("id_token")
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
